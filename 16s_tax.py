#!/usr/bin/env python

from __future__ import division
import os
import sys
import glob
import time
import errno
import shlex
import shutil
import tempfile
import argparse
import subprocess
import multiprocessing
from Bio import Entrez, SeqIO
from Bio.Blast import NCBIWWW, NCBIXML


# position of the script -------------------------------------------------------
path_DB = os.path.realpath(__file__)
path_array = path_DB.split("/")
relative_path = "/".join(path_array[0:-1]) + "/"

# -p.pa-----------------------------------------------------------------------------
#       print the help informations
# ------------------------------------------------------------------------------
class CapitalisedHelpFormatter(argparse.HelpFormatter):
    def add_usage(self, usage, actions, groups, prefix=None):
        if prefix is None:
            prefix = ''
        return super(CapitalisedHelpFormatter, self).add_usage(usage, actions, groups, prefix)

def msg(name=None):
    str_msg = '''
\00
Program: 16s_tax - a tool to annotation 16s sequence and get it taxonomic infomation

Usage: 16s_taxonomic [-i/-a] <file> [--e] A.N.Other@example.com [options]

Input option:
  -i  FILE    fasta file containing the 16S sequences
  -a  FILE    provide the alignment generated by -A [None] 

Output option:
  -o  FILE    output file name [stdout]
  -A  FILE    save the intermediate alignment [None]

Algorithm options:
  -t  INT     number of threads [1]
  -v  INT     verbose level: 1=error, 2=warning, 3=message, 4+=debugging [3]

blast options:
  --e   STR    tell ncib who you are by the email [A.N.Other@example.com]
  --p   STR    blast program (blastn, blastp, blastx, tblastn, or tblastx) [blastn](lower case)
  --db  STR    blast database
  --n   INT    Number of alignments to show [500]

        '''
    return str_msg

def blast_online(fasta_input, blast_type, blast_db, blast_num_al, output_alignment):
    record = SeqIO.read(fasta_input, format="fasta")
    result_handle = NCBIWWW.qblast(blast_type, blast_db, record.format("fasta"), alignments=blast_num_al)
    save_file = open(output_alignment+".xml", "w")
    save_file.write(result_handle.read())
    save_file.close()
    result_handle.close()
    return True

def entrez_gi(al_input,blast_email):
    result_handle = open(al_input, "r")
    blast_records = NCBIXML.parse(result_handle)
    for alignment in blast_records.alignments:
        gi_id = alignment.title.split("|")[1]
        handle = Entrez.esearch(db="nucleotide", term=gi_id)
    

def parse_gb():
    pass

def main(argv=None):

    devnull = open(os.devnull)

    parser = argparse.ArgumentParser(usage=msg(), formatter_class=CapitalisedHelpFormatter,add_help=False)
    parser.add_argument('-v', action='store', type=int, default=None, dest='verbose', help='Verbose levels')
    parser.add_argument('-t', type=int, action="store", dest='threads', default=None, help='Number of threads to be used.')
    parser.add_argument('-o', action="store", dest='output', default=None, help='name of output file')
    parser.add_argument('-A', action="store", dest='output_alignment', default=None, help='save alignment')
    parser.add_argument('-i', action="store", default=None,dest='fasta_input', help='fasta input')
    parser.add_argument('-a', action="store", default=None,dest='al_input', help='alignment input')
    parser.add_argument('--e', action="store", default=None, dest="blast_email", help='tell the NCBI who you are')
    parser.add_argument('--type', action="store", default=None, dest="blast_type", help='blast type')
    parser.add_argument('--db', action="store", default=None, dest='blast_db', help='blast database')
    parser.add_argument('--n', action="store", default=None, dest='blast_num_al', help='Number of alignments to show')

    args = parser.parse_args()

    if (args.fasta_input is None) and (args.al_input is None):
        print(msg())
        sys.exit(1)

if __name__ == "__main__":
    status = main()
    sys.exit(status)